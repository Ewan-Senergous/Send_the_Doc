---
description: 
globs: 
alwaysApply: true
---

- Évitez les classes; privilégiez l'itération et la modularisation à la duplication de code.
- Utilisez des noms de variables descriptifs avec des verbes auxiliaires (par exemple, «isLoading», «hasError»).
- Structurez les fichiers en: composant exporté, sous-composants, aides, contenu statique et types.

## syntax-and-formatting

- Évitez les accolades inutiles dans les conditions; utilisez une syntaxe concise pour les instructions simples.
- Rédigez du JSX déclaratif.

## typescript-usage

- Utilisez TypeScript pour tout le code; privilégiez les types aux interfaces.
- Évitez les énumérations; privilégiez les maps.
- Utilisez des composants fonctionnels avec des types TypeScript.

## ui-and-styling

- Utilisez Shadcn UI, Radix et Tailwind pour les composants et le style.
- Implémentez un design responsive avec Tailwind CSS en adoptant une approche mobile-first. ## Optimisation des performances

- Minimiser «use client», «useEffect» et «setState»; privilégier les composants serveur React (RSC).
- Envelopper les composants clients dans «Suspense» avec une solution de secours.
- Utiliser le chargement dynamique pour les composants non critiques.
- Optimiser les images: utiliser le format WebP, inclure les données de taille et implémenter le chargement différé.

## interrogation-de-base-de-données-et-création-de-modèles-de-données

- Utiliser le SDK Prisma pour interroger la base de données.
- Pour les modèles de données, consulter les fichiers «.prisma».

## Conventions clés

- Utiliser «nuqs» pour la gestion de l'état des paramètres de recherche d'URL.
- Optimiser les Web Vitals (LCP, CLS, FID).
- Limiter «use client»: privilégier les composants serveur et le SSR Next.js pour la récupération de données ou la gestion de l'état.
- Utiliser «use client» uniquement pour l'accès à l'API Web dans les petits composants.

